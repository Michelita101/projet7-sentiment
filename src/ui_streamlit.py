import streamlit as st
import requests

# === Configuration ===
API_URL = "http://127.0.0.1:8000/predict"

# === Interface utilisateur ===
st.image("data/logo.png", width=200)
st.title("Analyse de sentiment")
st.write("Entrez un ou plusieurs tweets en anglais (un par ligne) üëá")

tweets_brut = st.text_area("Entrez un ou plusieurs tweets :", height=150)

if st.button("Analyser") and tweets_brut.strip():
    # D√©coupe en plusieurs lignes/tweets
    tweets = [t.strip() for t in tweets_brut.strip().split("\n") if t.strip()]
    donn√©es = {"textes": tweets}

    try:
        r√©ponse = requests.post(API_URL, json=donn√©es)
        if r√©ponse.status_code == 200:
            r√©sultat = r√©ponse.json()
            pr√©dictions = r√©sultat["pr√©dictions"]

            # Cr√©ation DataFrame pour affichage + export
            import pandas as pd
            df_r√©sultats = pd.DataFrame(pr√©dictions)

            # Affichage dynamique dans Streamlit
            st.subheader("R√©sultats de l‚Äôanalyse")
            for _, row in df_r√©sultats.iterrows():
                st.markdown(
                    f"__Tweet :__ {row['texte']}  \n"
                    f"Sentiment : __{row['sentiment']}__ ({row['confiance (%)']}%)"
                )

            # Section t√©l√©chargement
            st.subheader("T√©l√©charger les r√©sultats")
            csv = df_r√©sultats.to_csv(index=False).encode("utf-8")
            json = df_r√©sultats.to_json(orient="records", force_ascii=False, indent=2)

            st.download_button("‚¨áÔ∏è T√©l√©charger en CSV", csv, "r√©sultats_sentiments.csv", "text/csv")
            st.download_button("‚¨áÔ∏è T√©l√©charger en JSON", json, "r√©sultats_sentiments.json", "application/json")

        else:
            st.error(f"‚ùå Erreur {r√©ponse.status_code} : {r√©ponse.text}")
    except Exception as e:
        st.error(f"üí• Erreur lors de la requ√™te : {e}")
